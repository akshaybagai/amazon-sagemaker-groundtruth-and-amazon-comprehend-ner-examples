AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Converter

  SAM Template for a function to convert an Amazon SageMaker GroundTruth NER
  augmented manifest to the CoNLL-2003 format.

Parameters:
  AccountId:
    Description: "12-digit AWS account id. Default is default. NOTE: 'sam local ...' must use --parameter-overrides to specify a valid one."
    Type: String
    Default: default

  # Lambda functions add a policy to this name rather than S3Bucket to prevent circular dependency.
  BucketName:
    Description: "Name of a new S3 bucket to create. Default is gtner-blog."
    Type: String
    Default: gtner-blog

  NotebookName:
    Description: Enter the name of the SageMaker notebook instance. Default is gtner-blog.
    Type: String
    Default: gtner-blog

  UseVPC:
    Description: "Whether to launch the notebook into a VPC. Default is false."
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

  PrivateSubnet:
    # Use String rather than AWS::EC2::Subnet::Id to allow for empty values
    Type: String
    Description: The ID of the subnet in a VPC to which you would like to have a connectivity from your ML compute instance

  SecurityGroup:
    # Use String rather than AWS::EC2::SecurityGroup::Id to allow for empty values
    Type: String
    Description: The security group to provide the notebook access within the VPC

Metadata:
  AWS::CloudFormation::Interface:
    ParameterLabels:
      AccountId:
        default: 12-digit AWS account id (or "default")
      BucketName:
        default: S3 Bucket Name
      NotebookName:
        default: Notebook Name
      UseVPC:
        default: Use existing VPC?
      PrivateSubnet:
        default: Private Subnet Id
      SecurityGroup:
        default: Security Group Id

    ParameterGroups:
      - Label:
          default: General
        Parameters:
          - BucketName
          - AccountId
      - Label:
          default: Notebook
        Parameters:
          - NotebookName
          - UseVPC
          - SecurityGroup
          - PrivateSubnet

Conditions:
  SamLocal: !Not [!Equals [!Ref AccountId, default]]
  UseOwnVPC: !Equals [!Ref UseVPC, "true"]

Globals:
  Function:
    Timeout: 900
    MemorySize: 3008

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  SpacyP38Layer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.8
      Content:
        S3Bucket: amazon-sagemaker-groundtruth-ner
        S3Key: lambda-layer-spacy-p38.zip
      Description: spacy-2.2.3 (SDK only) and s3fs-0.4.0.
      LicenseInfo: MIT

  ConllFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: conll-converter/
      Handler: app.lambda_handler
      Runtime: python3.8
      Layers:
        - !Ref SpacyP38Layer
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref BucketName
      Events:
        NewAugmentedManifestEvent:
          Type: S3
          Properties:
            Bucket: !Ref S3Bucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                # GroundTruth output: s3://<bucket>/<my-prefix>/<jobname>/manifests/output/output.manifest
                Rules:
                  - Name: suffix
                    Value: manifests/output/output.manifest

  SMNotebook:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      DefaultCodeRepository: https://github.com/aws-samples/amazon-sagemaker-groundtruth-ner.git
      InstanceType: ml.t3.medium
      NotebookInstanceName: !Ref NotebookName
      RoleArn: !GetAtt SMExecutionRole.Arn
      LifecycleConfigName: !GetAtt SMLifecycleConfig.NotebookInstanceLifecycleConfigName
      SubnetId: !If [UseOwnVPC, !Ref PrivateSubnet, !Ref "AWS::NoValue"]
      SecurityGroupIds:
        - !If [UseOwnVPC, !Ref SecurityGroup, !Ref "AWS::NoValue"]

  SMLifecycleConfig:
    Type: AWS::SageMaker::NotebookInstanceLifecycleConfig
    Properties:
      OnCreate:
        - Content:
            Fn::Base64: !Sub |
              #!/usr/bin/env bash
              # A lifecycle configuration for SageMaker notebook instances. Can be used for
              # "on-create" or "on-start". The later is useful to ensure S3 has pristine
              # sample corpus every time the notebook instance starts.
              set -e

              # On-create: default git repo not cloned yet, so source directly from origin.
              # On-start: source from origin to ensure S3 has pristine copies.
              ORIGIN=aws-samples/amazon-sagemaker-groundtruth-ner
              BUCKET=${S3Bucket}
              for i in doc-00.txt doc-01.txt doc-02.txt
              do
                  curl --silent --location https://raw.githubusercontent.com/$ORIGIN/master/refdata/$i \
                      | aws s3 cp - s3://$BUCKET/sampleraw/$i
              done
      OnStart:
        - Content:
            Fn::Base64: !Sub |
              #!/usr/bin/env bash
              # A lifecycle configuration for SageMaker notebook instances. Can be used for
              # "on-create" or "on-start". The later is useful to ensure S3 has pristine
              # sample corpus every time the notebook instance starts.
              set -e

              # On-create: default git repo not cloned yet, so source directly from origin.
              # On-start: source from origin to ensure S3 has pristine copies.
              ORIGIN=aws-samples/amazon-sagemaker-groundtruth-ner
              BUCKET=${S3Bucket}
              for i in doc-00.txt doc-01.txt doc-02.txt
              do
                  curl --silent --location https://raw.githubusercontent.com/$ORIGIN/master/refdata/$i \
                      | aws s3 cp - s3://$BUCKET/sampleraw/$i
              done

  SMExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "sagemaker.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"

Outputs:
  ConllFunction:
    Description: "CoNLL-2003 Lambda Function ARN"
    Value: !GetAtt ConllFunction.Arn
  ConllFunctionIamRole:
    Description: "Implicit IAM Role created for CoNLL-2003 function"
    Value: !GetAtt ConllFunctionRole.Arn
